{"version":3,"sources":["constants/api.constants.js","redux/cards/cards.constants.js","redux/cards/actions/getCards.js","helpers/cookie.js","redux/user/user.constants.js","redux/user/actions/login.js","redux/user/actions/logout.js","helpers/redux.js","redux/cards/reducers/cards.reducer.js","redux/cards/reducers/getCards.js","redux/user/reducers/user.reducer.js","redux/user/reducers/login.js","redux/user/reducers/logout.js","redux/rootReducer.js","redux/store.js","redux/cards/actions/editCard.js","redux/cards/actions/createCard.js","components/Task/TaskView/TaskView.js","components/Task/TaskEdit/TaskEdit.js","components/Task/Task.js","components/SortList/SortList.js","constants/sort.constants.js","containers/TaskList/TaskList.js","containers/PageHeader/LoginForm/LoginForm.js","containers/PageHeader/PageHeader.js","containers/NewTaskForm/NewTaskForm.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","endpoints","cardConstants","getCards","pageNumber","sortField","sortDirection","dispatch","type","getCardsService","then","answer","error","status","cardsInfo","success","message","a","async","requestOptions","method","headers","query","fetch","data","json","getCookie","name","matches","document","cookie","match","RegExp","replace","decodeURIComponent","undefined","setCookie","value","options","expires","d","Date","setTime","getTime","toUTCString","updatedCookie","encodeURIComponent","propName","propValue","userConstants","loginService","username","password","form","FormData","append","mode","cache","credentials","redirect","referrer","body","loginInfoResponse","logout","createReducer","initialState","handlers","state","action","hasOwnProperty","cardsReducer","loading","cards","totalCardsCount","tasks","parseInt","total_task_count","userReducer","loggedIn","console","log","rootReducer","combineReducers","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","editCard","id","cardData","text","getState","filter","it","editedIds","JSON","parse","push","stringify","editCardService","createCard","newData","email","createCardService","TaskView","onEditClick","editable","editedByAdmin","some","className","size","onClick","href","TextArea","Input","TaskEdit","textInputValue","props","statusInputValue","handleTextInputChange","evt","setState","target","handleStatusInputChange","checked","handleSaveClick","onSaveClick","onCancelClick","this","rows","onChange","React","Component","Task","isEdit","handleToggleEditMode","handleSave","taskData","onEdit","false","Option","Select","SortList","sortItems","currentItem","onSortItemChange","map","item","index","OptGroup","key","label","sortTitles","TaskList","handlePaginationItemClick","page","onSortChange","sortInfo","split","handleEdit","current","defaultPageSize","total","connectedComponent","connect","LoginForm","handleSubmit","e","onLogin","preventDefault","validateFields","err","values","getFieldDecorator","onSubmit","Item","rules","required","placeholder","Password","htmlType","WrappedLoginForm","Form","create","PageHeader","modalVisible","showModal","handleModalCancel","handleLogin","login","title","visible","footer","onCancel","token","NewTaskForm","handleFormSubmit","WrappedNewTaskForm","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d785aa7e.chunk.js","sourcesContent":["export const baseURL = \"https://uxcandy.com/~shapoval/test-task-backend/v2\";\n\nexport const endpoints = {\n  getTasks: \"/\",\n  createTask: \"/create\",\n  editTask: \"/edit\",\n  login: \"/login\"\n};\n","export const cardConstants = {\n  GET_CARDS_REQUEST: \"GET_CARDS_REQUEST\",\n  GET_CARDS_SUCCESS: \"GET_CARDS_SUCCESS\",\n  GET_CARDS_FAILURE: \"GET_CARDS_FAILURE\",\n\n  EDIT_CARD_REQUEST: \"EDIT_CARD_REQUEST\",\n  EDIT_CARD_SUCCESS: \"EDIT_CARD_SUCCESS\",\n  EDIT_CARD_FAILURE: \"EDIT_CARD_FAILURE\",\n\n  CREATE_CARD_REQUEST: \"CREATE_CARD_REQUEST\",\n  CREATE_CARD_SUCCESS: \"CREATE_CARD_SUCCESS\",\n  CREATE_CARD_FAILURE: \"CREATE_CARD_FAILURE\"\n};\n","import { baseURL } from \"../../../constants/api.constants\";\nimport { cardConstants } from \"../cards.constants\";\n\nexport const getCards = (\n  pageNumber = 1,\n  sortField = \"username\",\n  sortDirection = \"asc\"\n) => {\n  return dispatch => {\n    dispatch(request());\n    return getCardsService(pageNumber, sortField, sortDirection).then(\n      answer => {\n        if (answer.status === \"ok\") {\n          dispatch(\n            success(answer.message, pageNumber, sortField, sortDirection)\n          );\n        } else {\n          dispatch(failure(answer.message));\n        }\n      }\n    );\n\n    function request() {\n      return { type: cardConstants.GET_CARDS_REQUEST };\n    }\n\n    function success(cardsInfo, pageNumber, sortField, sortDirection) {\n      return {\n        type: cardConstants.GET_CARDS_SUCCESS,\n        cardsInfo,\n        pageNumber,\n        sortField,\n        sortDirection\n      };\n    }\n\n    function failure(error) {\n      return { type: cardConstants.GET_CARDS_FAILURE, error };\n    }\n  };\n};\n\nasync function getCardsService(pageNumber, sortField, sortDirection) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: { \"Content-Type\": \"application/json\" }\n  };\n\n  const query = `${baseURL}/?developer=Name&sort_field=${sortField}&sort_direction=${sortDirection}&page=${pageNumber}`;\n\n  const data = await fetch(query, requestOptions);\n  const answer = await data.json();\n  return answer;\n}\n","// возвращает cookie с именем name, если есть, если нет, то undefined\nexport const getCookie = name => {\n  const matches = document.cookie.match(\n    new RegExp(\n      \"(?:^|; )\" +\n        name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, \"\\\\$1\") +\n        \"=([^;]*)\"\n    )\n  );\n  return matches ? decodeURIComponent(matches[1]) : undefined;\n};\n\nexport const setCookie = (name, value, options = {}) => {\n  options = options || {};\n\n  let expires = options.expires;\n\n  if (typeof expires === \"number\" && expires) {\n    const d = new Date();\n    d.setTime(d.getTime() + expires * 1000);\n    expires = options.expires = d;\n  }\n  if (expires && expires.toUTCString) {\n    options.expires = expires.toUTCString();\n  }\n\n  value = encodeURIComponent(value);\n\n  let updatedCookie = name + \"=\" + value;\n\n  for (const propName in options) {\n    updatedCookie += \"; \" + propName;\n    const propValue = options[propName];\n    if (propValue !== true) {\n      updatedCookie += \"=\" + propValue;\n    }\n  }\n\n  document.cookie = updatedCookie;\n};\n","export const userConstants = {\n  USER_LOGIN_REQUEST: \"USER_LOGIN_REQUEST\",\n  USER_LOGIN_SUCCESS: \"USER_LOGIN_SUCCESS\",\n  USER_LOGIN_FAILURE: \"USER_LOGIN_FAILURE\",\n\n  USER_LOGOUT: \"USER_LOGOUT\"\n};\n","import { userConstants } from \"../user.constants\";\nimport { setCookie } from \"../../../helpers/cookie\";\nimport { message } from \"antd\";\n//////////////////// ВХОД //////////////////////\nexport const login = (username, password) => {\n  return async function(dispatch) {\n    dispatch(request());\n\n    const answer = await loginService(username, password);\n    if (answer && answer.status === \"ok\") {\n      setCookie(\"token\", answer.message.token, {\n        expires: 3600 * 24\n      });\n      message.success(\"Вход выполнен\");\n      dispatch(success());\n    } else {\n      message.error(answer.message.password);\n      dispatch(failure(answer.message.password));\n    }\n  };\n\n  function request() {\n    return { type: userConstants.USER_LOGIN_REQUEST };\n  }\n  function success() {\n    return { type: userConstants.USER_LOGIN_SUCCESS };\n  }\n  function failure(error) {\n    return { type: userConstants.USER_LOGIN_FAILURE, error };\n  }\n};\n\n//////////////// СЕРВИС //////////////////////////////////\nasync function loginService(username, password) {\n  var form = new FormData();\n  form.append(\"username\", username);\n  form.append(\"password\", password);\n\n  const options = {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    credentials: \"same-origin\",\n    redirect: \"follow\",\n    referrer: \"no-referrer\",\n    body: form\n  };\n\n  // получаем токен\n  const loginInfoResponse = await fetch(\n    \"https://uxcandy.com/~shapoval/test-task-backend/v2/login/?developer=Example\",\n    options\n  );\n  const answer = await loginInfoResponse.json();\n  return answer;\n}\n","import { userConstants } from \"../user.constants\";\nimport { setCookie } from \"../../../helpers/cookie\";\n\nexport const logout = () => {\n  return dispatch => {\n    setCookie(\"token\", \"\");\n    dispatch({\n      type: userConstants.USER_LOGOUT\n    });\n  };\n};\n","export const createReducer = (initialState, handlers) => {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action);\n    } else {\n      return state;\n    }\n  };\n};\n","import { cardConstants } from \"../cards.constants\";\nimport { createReducer } from \"../../../helpers/redux\";\nimport { getCardsRequest, getCardsSuccess } from \"../reducers/getCards\";\n\nconst initialState = {\n  loading: false,\n  cards: [],\n  error: undefined,\n  totalCardsCount: 0,\n  pageNumber: 1,\n  sortField: \"username\",\n  sortDirection: \"asc\"\n};\n\nexport const cardsReducer = createReducer(initialState, {\n  [cardConstants.GET_CARDS_REQUEST]: getCardsRequest,\n  [cardConstants.GET_CARDS_SUCCESS]: getCardsSuccess\n});\n","export const getCardsRequest = (state, action) => {\n  return {\n    ...state,\n    loading: true\n  };\n};\n\nexport const getCardsSuccess = (state, action) => {\n  return {\n    ...state,\n    loading: false,\n    cards: action.cardsInfo.tasks,\n    totalCardsCount: parseInt(action.cardsInfo.total_task_count),\n    pageNumber: action.pageNumber,\n    sortField: action.sortField,\n    sortDirection: action.sortDirection\n  };\n};\n","import { userConstants } from \"../user.constants\";\nimport { createReducer } from \"../../../helpers/redux\";\nimport { loginRequest, loginSuccess, loginFailure } from \"./login\";\nimport { logout } from \"./logout\";\nimport { getCookie } from \"../../../helpers/cookie\";\n\nconst initialState = {\n  loading: false,\n  loggedIn: getCookie(\"token\") ? true : false,\n  error: \"\"\n};\n\nexport const userReducer = createReducer(initialState, {\n  [userConstants.USER_LOGIN_REQUEST]: loginRequest,\n  [userConstants.USER_LOGIN_SUCCESS]: loginSuccess,\n  [userConstants.USER_LOGIN_FAILURE]: loginFailure,\n  [userConstants.USER_LOGOUT]: logout\n});\n","export const loginRequest = (state, action) => {\n  return {\n    ...state,\n    loading: true\n  };\n};\n\nexport const loginSuccess = (state, action) => {\n  return {\n    ...state,\n    loading: false,\n    loggedIn: true\n  };\n};\n\nexport const loginFailure = (state, action) => {\n  console.log(\"lololo\");\n  return {\n    ...state,\n    loading: false,\n    error: action.error\n  };\n};\n","export const logout = (state, action) => {\n  return { ...state, loggedIn: false };\n};\n","import { combineReducers } from \"redux\";\n\nimport { cardsReducer } from \"./cards/reducers/cards.reducer\";\nimport { userReducer } from \"./user/reducers/user.reducer\";\n\nconst rootReducer = combineReducers({\n  cardsReducer,\n  userReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport rootReducer from \"./rootReducer\";\n\nconst loggerMiddleware = createLogger();\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, loggerMiddleware)\n);\n","import { baseURL, endpoints } from \"../../../constants/api.constants\";\nimport { cardConstants } from \"../cards.constants\";\nimport { message } from \"antd\";\nimport { getCookie, setCookie } from \"../../../helpers/cookie\";\nimport { logout } from \"../../user/actions\";\nimport { store } from \"./../../store\";\n\nexport const editCard = (id, cardData) => {\n  return dispatch => {\n    dispatch(request());\n    return editCardService(id, cardData).then(answer => {\n      if (answer.status === \"ok\") {\n        dispatch(success(answer.message));\n        message.success(\"Редактирование успешно\");\n      } else {\n        dispatch(failure(answer.message));\n        dispatch(logout());\n        message.error(\"Ошибка редактирования\");\n      }\n    });\n\n    function request() {\n      return { type: cardConstants.EDIT_CARD_REQUEST };\n    }\n\n    function success(cardsInfo) {\n      return { type: cardConstants.EDIT_CARD_SUCCESS, cardsInfo };\n    }\n\n    function failure(error) {\n      return { type: cardConstants.EDIT_CARD_FAILURE, error };\n    }\n  };\n};\n\nasync function editCardService(id, cardData) {\n  const body = new FormData();\n  body.append(\"text\", cardData.text);\n  body.append(\"status\", cardData.status ? \"10\" : \"0\");\n  body.append(\"token\", getCookie(\"token\"));\n\n  const state = store.getState();\n  const { cards } = state.cardsReducer;\n\n  const oldCardData = cards.filter(it => it[\"id\"] === id)[0];\n\n  if (oldCardData[\"text\"] !== cardData[\"text\"]) {\n    const editedIds = JSON.parse(getCookie(\"editedIds\") || \"[]\");\n    editedIds.push(id);\n    setCookie(\"editedIds\", JSON.stringify(editedIds));\n  }\n\n  const requestOptions = {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    credentials: \"same-origin\",\n    redirect: \"follow\",\n    referrer: \"no-referrer\",\n    body\n  };\n\n  const query = `${baseURL}${endpoints.editTask}/${id}/?developer=Name`;\n\n  const data = await fetch(query, requestOptions);\n  const answer = await data.json();\n  return answer;\n}\n","import { baseURL, endpoints } from \"../../../constants/api.constants\";\nimport { cardConstants } from \"../cards.constants\";\nimport { message } from \"antd\";\n\nexport const createCard = newData => {\n  return dispatch => {\n    dispatch(request());\n    return createCardService(newData).then(answer => {\n      if (answer.status === \"ok\") {\n        dispatch(success());\n        message.success(\"Задача добавлена\");\n      } else {\n        dispatch(failure());\n        message.error(\"Ошибка добавления\");\n      }\n    });\n\n    function request() {\n      return { type: cardConstants.CREATE_CARD_REQUEST };\n    }\n\n    function success() {\n      return { type: cardConstants.CREATE_CARD_SUCCESS };\n    }\n\n    function failure() {\n      return { type: cardConstants.CREATE_CARD_FAILURE };\n    }\n  };\n};\n\nasync function createCardService(newData) {\n  const body = new FormData();\n  body.append(\"username\", newData.username);\n  body.append(\"email\", newData.email);\n  body.append(\"text\", newData.text);\n\n  const requestOptions = {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    credentials: \"same-origin\",\n    redirect: \"follow\",\n    referrer: \"no-referrer\",\n    body\n  };\n\n  const query = `${baseURL}${endpoints.createTask}/?developer=Name`;\n\n  const data = await fetch(query, requestOptions);\n  const answer = await data.json();\n  return answer;\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./TaskView.scss\";\nimport { Button, Icon } from \"antd\";\nimport { getCookie } from \"./../../../helpers/cookie\";\n\nconst TaskView = ({\n  id,\n  username,\n  email,\n  text,\n  status,\n  onEditClick,\n  editable\n}) => {\n  const editedByAdmin = JSON.parse(getCookie(\"editedIds\")).some(\n    it => parseInt(it) === id\n  );\n  return (\n    <div className=\"task-view\">\n      {editable && (\n        <Button\n          size=\"small\"\n          className=\"task-view__button\"\n          onClick={onEditClick}\n        >\n          <Icon type=\"edit\" />\n          <span className=\"visually-hidden\">Редактировать</span>\n        </Button>\n      )}\n      <div className=\"task-view__outer-wrapper\">\n        <p className=\"task-view__author\">{username}</p>\n        <a className=\"task-view__email\" href={`mailto:${email}`}>\n          {email}\n        </a>\n      </div>\n      <p className=\"task-view__text\">{text}</p>\n      <p\n        className={`task-view__status ${\n          status ? \"task-view__status--finished\" : \"\"\n        }`}\n      >\n        {status ? \"Завершено\" : \"Не выполнено\"}\n      </p>\n\n      {editedByAdmin && (\n        <small className=\"task-view__mark\">\n          Отредактировано администратором\n        </small>\n      )}\n    </div>\n  );\n};\n\nTaskView.propTypes = {\n  username: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  status: PropTypes.number.isRequired,\n  onEditClick: PropTypes.func.isRequired,\n  editable: PropTypes.bool.isRequired\n};\n\nexport default TaskView;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./TaskEdit.scss\";\nimport { Button, Input, Checkbox } from \"antd\";\n\nconst { TextArea } = Input;\n\nclass TaskEdit extends React.Component {\n  state = {\n    textInputValue: this.props.text,\n    statusInputValue: this.props.status\n  };\n\n  static propTypes = {\n    onSaveClick: PropTypes.func.isRequired,\n    onCancelClick: PropTypes.func.isRequired,\n    username: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired\n  };\n\n  handleTextInputChange = evt => {\n    this.setState({\n      textInputValue: evt.target.value\n    });\n  };\n\n  handleStatusInputChange = evt => {\n    this.setState({\n      statusInputValue: evt.target.checked\n    });\n  };\n\n  handleSaveClick = () => {\n    const { onSaveClick } = this.props;\n    const newCardData = {\n      text: this.state.textInputValue,\n      status: this.state.statusInputValue\n    };\n\n    onSaveClick(newCardData);\n    this.props.onCancelClick();\n  };\n\n  render() {\n    const { username, email, onCancelClick } = this.props;\n    const { textInputValue, statusInputValue } = this.state;\n\n    return (\n      <div className=\"task-edit\">\n        <div className=\"task-edit__buttons-wrapper\">\n          <Button\n            size=\"small\"\n            className=\"task-edit__button\"\n            onClick={onCancelClick}\n          >\n            Отмена\n          </Button>\n          <Button\n            type=\"primary\"\n            size=\"small\"\n            className=\"task-edit__button\"\n            onClick={this.handleSaveClick}\n          >\n            Сохранить\n          </Button>\n        </div>\n        <div className=\"task-edit__outer-wrapper\">\n          <p className=\"task-edit__author\">{username}</p>\n          <a className=\"task-edit__email\" href={`mailto:${email}`}>\n            {email}\n          </a>\n        </div>\n        <TextArea\n          className=\"task-edit__text\"\n          rows=\"1\"\n          value={textInputValue}\n          onChange={this.handleTextInputChange}\n        />\n        <p\n          className={`task-edit__status ${\n            statusInputValue ? \"task-edit__status--finished\" : \"\"\n          }`}\n        >\n          <Checkbox\n            className=\"task-edit__checkbox\"\n            onChange={this.handleStatusInputChange}\n            checked={statusInputValue}\n          >\n            {statusInputValue ? \"Завершено\" : \"Не выполнено\"}\n          </Checkbox>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default TaskEdit;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskView from \"./TaskView/TaskView\";\nimport TaskEdit from \"./TaskEdit/TaskEdit\";\n\nclass Task extends React.Component {\n  state = {\n    isEdit: false\n  };\n\n  static propTypes = {\n    id: PropTypes.number,\n    onEdit: PropTypes.func.isRequired,\n    taskData: PropTypes.object.isRequired,\n    editable: PropTypes.bool.isRequired\n  };\n\n  handleToggleEditMode = () => {\n    this.setState({\n      isEdit: !this.state.isEdit\n    });\n  };\n\n  handleSave = cardData => {\n    const { id } = this.props.taskData;\n    const { onEdit } = this.props;\n\n    onEdit(id, cardData);\n\n    this.setState({\n      isEdit: !this.state.false\n    });\n  };\n\n  render() {\n    const { taskData, editable } = this.props;\n\n    return this.state.isEdit ? (\n      <TaskEdit\n        {...taskData}\n        onSaveClick={this.handleSave}\n        onCancelClick={this.handleToggleEditMode}\n      />\n    ) : (\n      <TaskView\n        {...taskData}\n        editable={editable}\n        onEditClick={this.handleToggleEditMode}\n      />\n    );\n  }\n}\n\nexport default Task;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./SortList.scss\";\nimport { Select, Icon } from \"antd\";\n\nconst { Option } = Select;\n\nconst SortList = props => {\n  const { className, sortItems, currentItem, onSortItemChange } = props;\n\n  return (\n    <Select\n      onChange={onSortItemChange}\n      value={currentItem}\n      className={`${className} sort-list`}\n    >\n      {sortItems.map((item, index) => (\n        <Select.OptGroup key={index} label={item.name}>\n          <Option value={`${item.name}_asc`}>\n            <Icon type=\"caret-up\" className=\"sort-list__icon\" />\n            {item.value}\n          </Option>\n          <Option value={`${item.name}_desc`}>\n            <Icon type=\"caret-down\" className=\"sort-list__icon\" />\n            {item.value}\n          </Option>\n        </Select.OptGroup>\n      ))}\n    </Select>\n  );\n};\n\nSortList.propTypes = {\n  className: PropTypes.string,\n  sortItems: PropTypes.array.isRequired,\n  currentItem: PropTypes.string.isRequired,\n  onSortItemChange: PropTypes.func.isRequired\n};\n\nexport default SortList;\n","export const sortTitles = [\n  {\n    name: \"username\",\n    value: \"Имя пользователя\"\n  },\n  {\n    name: \"email\",\n    value: \"Email\"\n  },\n  {\n    name: \"status\",\n    value: \"Статус задачи\"\n  }\n];\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport \"./TaskList.scss\";\nimport { Pagination, Spin } from \"antd\";\nimport { getCards, editCard } from \"../../redux/cards/actions\";\nimport Task from \"../../components/Task/Task\";\nimport SortList from \"../../components/SortList/SortList\";\nimport { sortTitles } from \"../../constants/sort.constants\";\nimport { getCookie } from \"../../helpers/cookie\";\n\nclass TaskList extends React.Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    getCards: PropTypes.func.isRequired,\n    editCard: PropTypes.func.isRequired,\n    pageNumber: PropTypes.number.isRequired,\n    sortField: PropTypes.string.isRequired,\n    sortDirection: PropTypes.string.isRequired,\n    cards: PropTypes.array.isRequired,\n    totalCardsCount: PropTypes.number.isRequired\n  };\n\n  componentWillMount() {\n    const { getCards } = this.props;\n    getCards();\n  }\n\n  handlePaginationItemClick = page => {\n    const { sortField, sortDirection, getCards } = this.props;\n    getCards(page, sortField, sortDirection);\n  };\n\n  onSortChange = sortInfo => {\n    const { pageNumber, getCards } = this.props;\n    const [sortField, sortDirection] = sortInfo.split(\"_\");\n    getCards(pageNumber, sortField, sortDirection);\n  };\n\n  handleEdit = (id, cardData) => {\n    const {\n      pageNumber,\n      sortField,\n      sortDirection,\n      editCard,\n      getCards\n    } = this.props;\n\n    editCard(id, cardData).then(() => {\n      getCards(pageNumber, sortField, sortDirection);\n    });\n  };\n\n  render() {\n    const {\n      loading,\n      cards,\n      totalCardsCount,\n      sortField,\n      sortDirection,\n      pageNumber\n    } = this.props;\n\n    if (loading) {\n      return (\n        <div className=\"task-list\">\n          <Spin />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"task-list\">\n        <SortList\n          className=\"task-list__sort\"\n          sortItems={sortTitles}\n          onSortItemChange={this.onSortChange}\n          currentItem={`${sortField}_${sortDirection}`}\n        />\n        <ul className=\"task-list__wrapper\">\n          {cards.map((item, index) => (\n            <li key={index} className=\"task-list__item\">\n              <Task\n                taskData={item}\n                editable={getCookie(\"token\")}\n                onEdit={this.handleEdit}\n              />\n            </li>\n          ))}\n        </ul>\n        <Pagination\n          current={pageNumber}\n          defaultPageSize={3}\n          total={totalCardsCount}\n          onChange={this.handlePaginationItemClick}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const {\n    loading,\n    cards,\n    totalCardsCount,\n    pageNumber,\n    sortField,\n    sortDirection\n  } = state.cardsReducer;\n\n  const { loggedIn } = state.userReducer;\n\n  return {\n    loading,\n    loggedIn,\n    cards,\n    totalCardsCount,\n    pageNumber,\n    sortField,\n    sortDirection\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCards: (pageNumber, sortField, sortDirection) =>\n      dispatch(getCards(pageNumber, sortField, sortDirection)),\n    editCard: (id, cardData) => dispatch(editCard(id, cardData))\n  };\n};\n\nconst connectedComponent = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskList);\n\nexport { connectedComponent as TaskList };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./LoginForm.scss\";\nimport { Form, Input, Button } from \"antd\";\n\nclass LoginForm extends React.Component {\n  static propTypes = {\n    onLogin: PropTypes.func.isRequired\n  };\n\n  handleSubmit = e => {\n    const { form, onLogin } = this.props;\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (!err) {\n        onLogin(values.username, values.password);\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\n        <Form.Item>\n          {getFieldDecorator(\"username\", {\n            rules: [{ required: true, message: \"Обязательное поле!\" }]\n          })(<Input placeholder=\"Username\" />)}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator(\"password\", {\n            rules: [{ required: true, message: \"Обязательное поле!\" }]\n          })(<Input.Password type=\"password\" placeholder=\"Password\" />)}\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Войти\n        </Button>\n      </Form>\n    );\n  }\n}\n\nconst WrappedLoginForm = Form.create({ name: \"login\" })(LoginForm);\n\nexport default WrappedLoginForm;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./PageHeader.scss\";\nimport { Button, Icon, Modal } from \"antd\";\nimport LoginForm from \"./LoginForm/LoginForm\";\nimport { login, logout } from \"../../redux/user/actions\";\nimport PropTypes from \"prop-types\";\nimport { getCookie } from \"../../helpers/cookie\";\n\nclass PageHeader extends React.Component {\n  state = {\n    modalVisible: false\n  };\n\n  static propTypes = {\n    login: PropTypes.func.isRequired,\n    logout: PropTypes.func.isRequired\n  };\n\n  showModal = () => {\n    this.setState({\n      modalVisible: true\n    });\n  };\n\n  handleModalCancel = () => {\n    this.setState({\n      modalVisible: false\n    });\n  };\n\n  handleLogin = (username, password) => {\n    const { login } = this.props;\n    login(username, password).then(() => {\n      if (getCookie(\"token\") !== \"\" && this.state.modalVisible) {\n        this.handleModalCancel();\n      }\n    });\n  };\n\n  render() {\n    const { logout } = this.props;\n    return (\n      <header className=\"page-header\">\n        <a href=\"/\" className=\"page-header__link\">\n          <h1 className=\"page-header__title\">Task List</h1>\n        </a>\n        <div className=\"page-header__user-wrapper\">\n          <p className=\"page-header__status\">\n            {getCookie(\"token\") ? (\n              <>\n                <span className=\"page-header__username\">\n                  <Icon type=\"user\" className=\"page-header__user-icon\" />\n                  admin\n                </span>\n                <Button className=\"page-header__button\" onClick={logout}>\n                  Выйти\n                </Button>\n              </>\n            ) : (\n              <>\n                Вход не выполнен\n                <Button\n                  className=\"page-header__button\"\n                  onClick={this.showModal}\n                >\n                  Войти\n                </Button>\n              </>\n            )}\n          </p>\n        </div>\n        <Modal\n          title=\"Вход\"\n          visible={this.state.modalVisible}\n          footer={null}\n          onCancel={this.handleModalCancel}\n        >\n          <LoginForm onLogin={this.handleLogin} />\n        </Modal>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { error, loggedIn } = state.userReducer;\n  return {\n    error,\n    loggedIn\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: (username, password) => dispatch(login(username, password)),\n    logout: () => dispatch(logout())\n  };\n};\n\nconst connectedComponent = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PageHeader);\n\nexport { connectedComponent as PageHeader };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport \"./NewTaskForm.scss\";\nimport { Button, Icon, Modal, Form, Input } from \"antd\";\nimport { createCard, getCards } from \"../../redux/cards/actions\";\n\nconst { TextArea } = Input;\n\nclass NewTaskForm extends React.Component {\n  state = {\n    modalVisible: false\n  };\n\n  static propTypes = {\n    createCard: PropTypes.func.isRequired,\n    getCards: PropTypes.func.isRequired,\n    pageNumber: PropTypes.number.isRequired,\n    sortField: PropTypes.string.isRequired,\n    sortDirection: PropTypes.string.isRequired\n  };\n\n  showModal = () => {\n    this.setState({\n      modalVisible: true\n    });\n  };\n\n  handleModalCancel = () => {\n    this.setState({\n      modalVisible: false\n    });\n  };\n\n  handleFormSubmit = e => {\n    const {\n      form,\n      createCard,\n      getCards,\n      pageNumber,\n      sortField,\n      sortDirection\n    } = this.props;\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (!err) {\n        createCard(values).then(() => {\n          getCards(pageNumber, sortField, sortDirection);\n        });\n        this.handleModalCancel();\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <div className=\"new-task\">\n        <Button\n          type=\"primary\"\n          className=\"new-task__button\"\n          onClick={this.showModal}\n        >\n          Добавить задачу\n          <Icon type=\"plus\" />\n        </Button>\n        <Modal\n          title=\"Добавление задачи\"\n          footer={null}\n          visible={this.state.modalVisible}\n          onCancel={this.handleModalCancel}\n        >\n          <Form onSubmit={this.handleFormSubmit}>\n            <Form.Item label=\"Имя пользователя\" className=\"new-task__field\">\n              {getFieldDecorator(\"username\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Обязательное поле!\"\n                  }\n                ]\n              })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"E-mail\" className=\"new-task__field\">\n              {getFieldDecorator(\"email\", {\n                rules: [\n                  {\n                    type: \"email\",\n                    message: \"Невалидный Email!\"\n                  },\n                  {\n                    required: true,\n                    message: \"Обязательное поле!\"\n                  }\n                ]\n              })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"Текст задачи\" className=\"new-task__field\">\n              {getFieldDecorator(\"text\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Обязательное поле!\"\n                  }\n                ]\n              })(<TextArea />)}\n            </Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              className=\"new-task__button\"\n            >\n              Добавить\n            </Button>\n          </Form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { pageNumber, sortField, sortDirection } = state.cardsReducer;\n  return { pageNumber, sortField, sortDirection };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createCard: newData => dispatch(createCard(newData)),\n    getCards: (pageNumber, sortField, sortDirection) =>\n      dispatch(getCards(pageNumber, sortField, sortDirection))\n  };\n};\n\nconst connectedComponent = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NewTaskForm);\n\nconst WrappedNewTaskForm = Form.create({ name: \"newTask\" })(connectedComponent);\n\nexport { WrappedNewTaskForm as NewTaskForm };\n","import React from \"react\";\nimport \"./App.scss\";\nimport \"antd/dist/antd.css\";\nimport { TaskList } from \"./containers/TaskList/TaskList\";\nimport { PageHeader } from \"./containers/PageHeader/PageHeader\";\nimport { NewTaskForm } from \"./containers/NewTaskForm/NewTaskForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageHeader />\n      <NewTaskForm />\n      <TaskList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}